# .deliver/config

USING_DISTILLERY=true
GIT_CLEAN_PATHS=${GIT_CLEAN_PATHS:="rel"}

APP="verslaflamme"

BUILD_HOST="verslaflam.me"
BUILD_USER="deploy"
BUILD_AT="/home/$BUILD_USER/edeliver/$APP/builds"
RELEASE_DIR="$BUILD_AT/rel/$APP"

STAGING_HOSTS="verslaflam.me"
STAGING_USER="git"
TEST_AT="/test/$APP"

PRODUCTION_HOSTS="verslaflam.me"
PRODUCTION_USER="deploy"
DELIVER_TO="/opt/$APP"

# Symlinking prod.secret.exs is commented out,
# since I use environment variables for all secrets
#pre_erlang_get_and_update_deps() {
#  local _prod_secret_path="/home/deploy/prod.secret.exs"
#  if [ "$TARGET_MIX_ENV" = "prod" ]; then
#    __sync_remote "
#      ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
#    "
#  fi
#}

pre_erlang_clean_compile() {
# Someday I may consider using node and brunch
#  status "Running npm install"
#  __sync_remote "
#    [ -f ~/.profile ] && source ~/.profile
#    set -e
#    cd \"$BUILD_AT/apps/$APP\"
#    npm install $SILENCE
#  "
# 
#  status "Running brunch build"
#  __sync_remote "
#    [ -f ~/.profile ] && source ~/.profile
#    set -e
#    cd \"$BUILD_AT/apps/$APP\"
#    node_modules/brunch/bin/brunch build --production $SILENCE
#  "
#
  status "Running phoenix.digest"
  __sync_remote "
    set -e # fail if any command fails (recommended)
    cd '$BUILD_AT'
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest $SILENCE
  "
}

post_erlang_clean_compile() {
  [[ "$APP" = "api" ]] && prepare_projects_in_umbrella
}

prepare_projects_in_umbrella() {
  status "Preparing projects in umbrella"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e
    cd '${BUILD_AT}'
    for UMBRELLA_APP in \$(ls -1 apps | grep -v '$APP'); do
      echo \"Preparing \${UMBRELLA_APP} in umbrella...\" $SILENCE
      cd \"${BUILD_AT}/apps/\${UMBRELLA_APP}\" $SILENCE
      APP=\"\$UMBRELLA_APP\" MIX_ENV='$TARGET_MIX_ENV' mix do deps.get, compile
    done
  "
}
